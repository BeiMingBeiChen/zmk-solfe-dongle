#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

/ {
  zip_scroll_scaler: zip_scroll_scaler {
    compatible = "zmk,input-processor-scaler";
    #input-processor-cells = <2>;
    type = <INPUT_EV_REL>;
    codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
    track-remainders;
  };
};

&mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
};

&msc_input_listener {
       input-processors = <&zip_scroll_scaler 2 1>;
};

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};


/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    Home_Row: Home_Row {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <150>;
        flavor = "tap-preferred";
        tapping-term-ms = <250>;
        quick-tap-ms = <120>;
    };

    BkSp_DEL: BkSp_DEL {
        compatible = "zmk,behavior-mod-morph";
        label = "BkSp/DEL";
        bindings = <&kp BACKSPACE>, <&kp DELETE>;

        #binding-cells = <0>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    L_T: L_T {
        compatible = "zmk,behavior-hold-tap";
        label = "L_T";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        quick-tap-ms = <100>;
        tapping-term-ms = <200>;
    };

    M_T: M_T {
        compatible = "zmk,behavior-hold-tap";
        label = "M_T";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        quick-tap-ms = <100>;
        tapping-term-ms = <200>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 19 20 21 22 23 24 25 26 32 33 34 35 36 37 38 39 45 46 47 48 49 50 51 52 54 58 62 53 54 55 56 57 59 60 61 62 63>;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 19 25 26 32 38 39 45 51 52 54 58 62 53 54 55 56 57 59 60 61 62 63 0 1 2 3 4 5 6 13 14 15 16 17 18 19 26 27 28 29 30 31 32 39 40 41 42 43 44 52 58>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&mo 3         &trans           &kp GRAVE          &kp CLCK               &trans           &trans              &kp UP_ARROW     &rgb_ug RGB_TOG  &trans            &kp SCROLLLOCK           &kp PAUSE_BREAK     &trans                &mo 3
&trans        &kp Q            &kp W              &kp E                  &kp R            &kp T               &kp DOWN_ARROW   &kp Y            &kp U             &kp I                    &kp O               &kp P                 &trans
&kp ESCAPE    &hml LEFT_ALT A  &hml LEFT_SHIFT S  &hml LEFT_CONTROL D    &hml LEFT_GUI F  &kp G               &kp LEFT_ARROW   &kp H            &hmr RIGHT_GUI J  &hmr RIGHT_CONTROL K     &hmr RIGHT_SHIFT L  &hmr RIGHT_ALT COLON  &BkSp_DEL
&sk LEFT_ALT  &kp Z            &kp X              &kp C                  &kp V            &kp B               &kp RIGHT_ARROW  &kp N            &kp M             &kp COMMA                &kp DOT             &kp QUESTION          &sk RIGHT_ALT
&kp C_MUTE    &kp LEFT_GUI     &kp LEFT_CONTROL   &mt LEFT_SHIFT ESCAPE  &L_T 1 SPACE     &mt LEFT_GUI TAB    &kp ENTER        &BkSp_DEL        &L_T 1 RET        &mt RIGHT_SHIFT RS(RET)  &kp RIGHT_CONTROL   &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER 0";
        };

        layer_1 {
            bindings = <
&trans      &trans              &trans                    &kp KP_DOT                  &trans                  &trans          &mmv MOVE_UP     &trans     &trans                     &trans                         &trans                        &trans                            &trans
&trans      &kp STAR            &kp NUMBER_7              &kp NUMBER_8                &kp NUMBER_9            &kp NUMBER_0    &mmv MOVE_DOWN   &kp PG_UP  &kp HOME                   &kp UP                         &kp END                       &trans                            &trans
&trans      &hml LEFT_ALT PLUS  &hml LEFT_SHIFT NUMBER_4  &hml LEFT_CONTROL NUMBER_5  &hml LEFT_GUI NUMBER_6  &kp EQUAL       &mmv MOVE_LEFT   &kp PG_DN  &hmr RIGHT_GUI LEFT_ARROW  &hmr RIGHT_CONTROL DOWN_ARROW  &hmr RIGHT_SHIFT RIGHT_ARROW  &hmr RIGHT_ALT LS(DOUBLE_QUOTES)  &trans
&trans      &kp MINUS           &kp NUMBER_1              &kp NUMBER_2                &kp NUMBER_3            &kp KP_SLASH    &mmv MOVE_RIGHT  &mkp RCLK  &trans                     &kp LEFT_BRACKET               &kp RIGHT_BRACKET             &trans                            &trans
&kp C_MUTE  &trans              &trans                    &trans                      &trans                  &trans          &mkp LCLK        &trans     &trans                     &trans                         &trans                        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "layer 1";
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_UP     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_DOWN   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mkp LCLK        &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "layer 2";
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4    &trans  &trans           &trans           &trans           &trans           &trans           &trans
&trans  &out OUT_BLE  &trans        &trans        &bt BT_CLR_ALL  &bt BT_CLR      &trans  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &trans
&trans  &out OUT_USB  &trans        &trans        &trans          &trans          &trans  &rgb_ug RGB_EFF  &rgb_ug RGB_SPD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &trans
&trans  &trans        &trans        &bootloader   &soft_off       &sys_reset      &trans  &trans           &trans           &trans           &trans           &trans           &trans
&trans  &trans        &trans        &trans        &trans          &trans          &trans  &trans           &trans           &trans           &trans           &trans
            >;

            display-name = "layer 3";
        };
    };
};
